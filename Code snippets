                                                                cRUL
------------------------------------------------------------------------------------------------------------------------------------------------------
# NOTE: you must set $API_KEY below using information retrieved from your IBM Cloud account (https://au-syd.dai.cloud.ibm.com/docs/content/wsj/analyze-data/ml-authentication.html?context=cpdaas)

export API_KEY=<your API key>

export IAM_TOKEN=$(curl --insecure -X POST --location "https://iam.cloud.ibm.com/identity/token" \
--header "Content-Type: application/x-www-form-urlencoded" \
--header "Accept: application/json" \
--data-urlencode "grant_type=urn:ibm:params:oauth:grant-type:apikey" \
--data-urlencode "apikey=$API_KEY" | jq -r '.access_token')

# TODO:  manually define and pass values to be scored below

curl --location "https://private.au-syd.ml.cloud.ibm.com/ml/v4/deployments/5a85afd6-e008-4776-927b-6e901ce21fea/predictions?version=2021-05-01" \
--header "Content-Type: application/json" \
--header "Accept: application/json" \
--header "Authorization: Bearer $IAM_TOKEN" \
--data "{
    \"input_data\": [
        {
            \"fields\": [$ARRAY_OF_INPUT_FIELDS],
            \"values\": [[$ARRAY_OF_VALUES_TO_BE_SCORED], [$ANOTHER_ARRAY_OF_VALUES_TO_BE_SCORED]]
        }
    ]
}"

--------------------------------------------------------------------------------------------------------------------
                                                       JAVA
--------------------------------------------------------------------------------------------------------------------

import java.io.*;
import java.net.MalformedURLException;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
public class HttpClientTest {
	public static void main(String[] args) throws IOException {

		// NOTE: you must manually set API_KEY below using information retrieved from your IBM Cloud account. (https://au-syd.dai.cloud.ibm.com/docs/content/wsj/analyze-data/ml-authentication.html?context=cpdaas)

		String API_KEY = "<your API key>";

		HttpURLConnection tokenConnection = null;
		HttpURLConnection scoringConnection = null;
		BufferedReader tokenBuffer = null;
		BufferedReader scoringBuffer = null;
		try {
			// Getting IAM token
			URL tokenUrl = new URL("https://iam.cloud.ibm.com/identity/token?grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=" + API_KEY);
			tokenConnection = (HttpURLConnection) tokenUrl.openConnection();
			tokenConnection.setDoInput(true);
			tokenConnection.setDoOutput(true);
			tokenConnection.setRequestMethod("POST");
			tokenConnection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
			tokenConnection.setRequestProperty("Accept", "application/json");
			
			if (tokenConnection.getResponseCode() == 200) { // Successful response
				tokenBuffer = new BufferedReader(new InputStreamReader(tokenConnection.getInputStream()));
			} else { // Error response
				tokenBuffer = new BufferedReader(new InputStreamReader(tokenConnection.getErrorStream()));
			}

            String line;
			StringBuffer jsonString = new StringBuffer();
            while ((line = tokenBuffer.readLine()) != null) {
                jsonString.append(line);
            }
            System.out.println("Token response body:\n" + jsonString);
			// Scoring request
			URL scoringUrl = new URL("https://private.au-syd.ml.cloud.ibm.com/ml/v4/deployments/5a85afd6-e008-4776-927b-6e901ce21fea/predictions?version=2021-05-01");
			String iam_token = "Bearer " + jsonString.toString().split(":")[1].split("\"")[1];
			scoringConnection = (HttpURLConnection) scoringUrl.openConnection();
			scoringConnection.setDoInput(true);
			scoringConnection.setDoOutput(true);
			scoringConnection.setRequestMethod("POST");
			scoringConnection.setRequestProperty("Accept", "application/json");
			scoringConnection.setRequestProperty("Authorization", iam_token);
			scoringConnection.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
			OutputStreamWriter writer = new OutputStreamWriter(scoringConnection.getOutputStream(), "UTF-8");

			// NOTE:  manually define and pass the array(s) of values to be scored in the next line
			String payload = """
			{\"input_data\": [
				{
					\"fields\": [array_of_input_fields],
					\"values\": [array_of_values_to_be_scored, another_array_of_values_to_be_scored]
				}
			]}""";

			writer.write(payload);
			writer.close();

			if (scoringConnection.getResponseCode() == 200) { // Successful response
				scoringBuffer = new BufferedReader(new InputStreamReader(scoringConnection.getInputStream()));
			} else { // Error response
				scoringBuffer = new BufferedReader(new InputStreamReader(scoringConnection.getErrorStream()));
			}

            String lineScoring;
			StringBuffer jsonStringScoring = new StringBuffer();
            while ((lineScoring = scoringBuffer.readLine()) != null) {
                jsonStringScoring.append(lineScoring);
            }
            System.out.println("Scoring response body:\n" + jsonStringScoring);
		} catch (IOException e) {
			System.out.println("The request was not valid.");
			System.out.println(e.getMessage());
		}
		finally {
			if (tokenConnection != null) {
				tokenConnection.disconnect();
			}
			if (tokenBuffer != null) {
				tokenBuffer.close();
			}
			if (scoringConnection != null) {
				scoringConnection.disconnect();
			}
			if (scoringBuffer != null) {
				scoringBuffer.close();
			}
		}
	}
}
------------------------------------------------------------------------------------------------------------------------------
                                                          JavaScript
------------------------------------------------------------------------------------------------------------------------------
const XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;

// NOTE: you must manually enter your API_KEY below using information retrieved from your IBM Cloud account (https://au-syd.dai.cloud.ibm.com/docs/content/wsj/analyze-data/ml-authentication.html?context=cpdaas)
const API_KEY = "<your API key>";

const req = new XMLHttpRequest();
const oReq = new XMLHttpRequest();

function getToken(errorCallback, loadCallback) {
	req.addEventListener("load", loadCallback);
	req.addEventListener("error", errorCallback);
	req.open("POST", "https://iam.cloud.ibm.com/identity/token");
	req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
	req.setRequestHeader("Accept", "application/json");
	req.send("grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=" + API_KEY);
}

function apiPost(scoring_url, token, payload, loadCallback, errorCallback) {
	oReq.addEventListener("load", loadCallback);
	oReq.addEventListener("error", errorCallback);
	oReq.open("POST", scoring_url);
	oReq.setRequestHeader("Accept", "application/json");
	oReq.setRequestHeader("Authorization", "Bearer " + token);
	oReq.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
	oReq.send(payload);
}

getToken((err) => console.log("An error occurred submitting the request."), () => {
	let tokenResponse;
	try {
		tokenResponse = JSON.parse(req.responseText);
	} catch(ex) {
		console.log("An error occurred parsing the token response.");
		return;
	}
	// NOTE:  manually define and pass the array(s) of values to be scored in the next line
	const payload = `{"input_data": [
		{
			"fields": [array_of_input_fields],
			"values": [array_of_values_to_be_scored, another_array_of_values_to_be_scored]
		}
	]}`;

	const scoring_url = "https://private.au-syd.ml.cloud.ibm.com/ml/v4/deployments/5a85afd6-e008-4776-927b-6e901ce21fea/predictions?version=2021-05-01";
	apiPost(scoring_url, tokenResponse.access_token, payload, function (resp) {
		let parsedPostResponse;
		try {
			parsedPostResponse = JSON.parse(oReq.responseText);
		} catch (ex) {
			console.log("An error occurred parsing the scoring response.");
			return;
		}
		console.log("Scoring response");
		console.log(JSON.stringify(parsedPostResponse, null, "  "));
	}, function (error) {
		console.log(error);
	});
});
------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                              Python
------------------------------------------------------------------------------------------------------------------------------------------------------------
import requests

# NOTE: you must manually set API_KEY below using information retrieved from your IBM Cloud account (https://au-syd.dai.cloud.ibm.com/docs/content/wsj/analyze-data/ml-authentication.html?context=cpdaas)
API_KEY = "<your API key>"
token_response = requests.post('https://iam.cloud.ibm.com/identity/token', data={"apikey": API_KEY, "grant_type": 'urn:ibm:params:oauth:grant-type:apikey'})
mltoken = token_response.json()["access_token"]

header = {'Content-Type': 'application/json', 'Authorization': 'Bearer ' + mltoken}

# NOTE:  manually define and pass the array(s) of values to be scored in the next line
payload_scoring = {"input_data": [
	{
		"fields": [array_of_input_fields],
		"values": [array_of_values_to_be_scored, another_array_of_values_to_be_scored]
	}
]}

response_scoring = requests.post('https://private.au-syd.ml.cloud.ibm.com/ml/v4/deployments/5a85afd6-e008-4776-927b-6e901ce21fea/predictions?version=2021-05-01', json=payload_scoring,
 headers={'Authorization': 'Bearer ' + mltoken})

print("Scoring response")
try:
    print(response_scoring.json())
except ValueError:
    print(response_scoring.text)
except Exception as e:
    print(f"An unexpected error occurred: {e}")
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                    Scala
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import sttp.client4.quick.*
import scala.util.{Success, Failure}
import java.util.Base64
import java.nio.charset.StandardCharsets
import play.api.libs.json._

@main def main() = {
	// NOTE: you must manually set API_KEY below using information retrieved from your IBM Cloud account (https://au-syd.dai.cloud.ibm.com/docs/content/wsj/analyze-data/ml-authentication.html?context=cpdaas)

	val API_KEY = "<your API key>"

	// Get IAM service token
	val iam_url = uri"https://iam.cloud.ibm.com/identity/token?grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=$API_KEY"
	val iam_response = quickRequest.post(iam_url).header("Content-Type", "application/x-www-form-urlencoded").header("Accept",
		"application/json").send()
	val iamtoken_json: JsValue = Json.parse(iam_response.body)

	val iamtoken = (iamtoken_json \ "access_token").asOpt[String] match {
		case Some(x) => x
		case None => ""
	}

	// TODO:  manually define and pass list of values to be scored
	val payload_scoring = Json.stringify(Json.obj("input_data" -> Json.arr(Json.obj(
		"fields" -> Json.arr(list_of_input_fields),
		"values" -> Json.arr(Json.arr(list_of_values_to_be_scored))
	))))

	val scoring_url = uri"https://private.au-syd.ml.cloud.ibm.com/ml/v4/deployments/5a85afd6-e008-4776-927b-6e901ce21fea/predictions?version=2021-05-01"

	val response_scoring = quickRequest.post(scoring_url).body(payload_scoring).header("Content-Type",
		"application/json").header("Authorization", "Bearer " + iamtoken).send()
	println("scoring response")
	println(response_scoring.body)
}
